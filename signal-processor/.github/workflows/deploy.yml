name: Deploy Signal Processor to Cloud Run

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:

env:
  PROJECT_ID: pipmaker-signals
  SERVICE_NAME: external-signal-processor
  REGION: asia-northeast3

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker to use gcloud as a credential helper
      run: gcloud auth configure-docker

    - name: Build and push Docker image
      run: |
        docker build -t gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA .
        docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA

    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy $SERVICE_NAME \
          --image gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA \
          --platform managed \
          --region $REGION \
          --allow-unauthenticated \
          --memory 512Mi \
          --cpu 1 \
          --max-instances 5 \
          --min-instances 1 \
          --timeout 300s \
          --set-env-vars NODE_ENV=production \
          --set-env-vars LOG_LEVEL=info \
          --set-env-vars FIREBASE_PROJECT_ID=$PROJECT_ID \
          --set-env-vars GOOGLE_API_KEY="${{ secrets.GOOGLE_API_KEY }}" \
          --set-env-vars TELEGRAM_BOT_TOKEN="${{ secrets.TELEGRAM_BOT_TOKEN }}" \
          --set-env-vars TELEGRAM_CHAT_ID="${{ secrets.TELEGRAM_CHAT_ID }}" \
          --set-env-vars ALPHA_VANTAGE_API_KEY="${{ secrets.ALPHA_VANTAGE_API_KEY }}" \
          --set-env-vars NEWS_API_KEY="${{ secrets.NEWS_API_KEY }}"

    - name: Get service URL
      run: |
        SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region $REGION --format 'value(status.url)')
        echo "Service deployed at: $SERVICE_URL"
        
    - name: Test deployment
      run: |
        SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region $REGION --format 'value(status.url)')
        sleep 30  # Wait for service to be ready
        curl -f "$SERVICE_URL/health" || echo "Health check failed - service may still be starting"